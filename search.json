[{"path":"https://felixsabiron.github.io/firstlibsabiron/articles/generer_un_rapport_d_analyses.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Générer un rapport d’analyses","text":"Ce document montre comment utiliser les fonctions summary_commune, summary_departement, et generer_rapport du package firstlibsabiron pour générer des rapports d’analyses. summary_commune(): pour obtenir un résumé des élus d’une commune. summary_departement(): pour analyser les élus d’un département. generer_rapport(): pour générer un rapport HTML complet avec Quarto. Le package firstlibsabiron permet d’analyser les données des élus français à travers ces fonctions.","code":""},{"path":"https://felixsabiron.github.io/firstlibsabiron/articles/generer_un_rapport_d_analyses.html","id":"utilisation-de-summary_commune","dir":"Articles","previous_headings":"","what":"1. Utilisation de summary_commune","title":"Générer un rapport d’analyses","text":"La fonction summary_commune permet de résumer les données pour une commune donnée. Elle affiche : Le nom de la commune Le nombre total d’élus La repartition professionnelle Interprétation des résultats : le nom de la communne est “Nantes” Il y un total de 66 elus dans la commune de Nantes","code":"library(firstlibsabiron) library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union # Exemple pour la commune de Nantes (44109) commune_data <- elus_conseillers_municipaux_cm %>%   filter(Code.de.la.commune == \"44109\") %>%   creer_commune()  summary_commune(commune_data) #> Resume de la commune : #> Nom de la commune : Nantes  #> Nombre total d'elus : 66  #>  #> Repartition professionnelle : #> # A tibble: 25 × 2 #>    Code.de.la.categorie.socio.professionnelle     n #>                                         <dbl> <int> #>  1                                         11     1 #>  2                                         13     1 #>  3                                         21     1 #>  4                                         22     2 #>  5                                         23     2 #>  6                                         31     6 #>  7                                         33     8 #>  8                                         34     4 #>  9                                         35     5 #> 10                                         37    11 #> # ℹ 15 more rows"},{"path":"https://felixsabiron.github.io/firstlibsabiron/articles/generer_un_rapport_d_analyses.html","id":"execution-de-summary_commune","dir":"Articles","previous_headings":"1. Utilisation de summary_commune","what":"Execution de summary_commune()","title":"Générer un rapport d’analyses","text":"Interprétation des résultats : le nom de la communne est “Nantes” Il y un total de 66 elus dans la commune de Nantes","code":"library(firstlibsabiron) library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union # Exemple pour la commune de Nantes (44109) commune_data <- elus_conseillers_municipaux_cm %>%   filter(Code.de.la.commune == \"44109\") %>%   creer_commune()  summary_commune(commune_data) #> Resume de la commune : #> Nom de la commune : Nantes  #> Nombre total d'elus : 66  #>  #> Repartition professionnelle : #> # A tibble: 25 × 2 #>    Code.de.la.categorie.socio.professionnelle     n #>                                         <dbl> <int> #>  1                                         11     1 #>  2                                         13     1 #>  3                                         21     1 #>  4                                         22     2 #>  5                                         23     2 #>  6                                         31     6 #>  7                                         33     8 #>  8                                         34     4 #>  9                                         35     5 #> 10                                         37    11 #> # ℹ 15 more rows"},{"path":"https://felixsabiron.github.io/firstlibsabiron/articles/generer_un_rapport_d_analyses.html","id":"utilisation-de-summary_departement","dir":"Articles","previous_headings":"","what":"2. Utilisation de summary_departement","title":"Générer un rapport d’analyses","text":"La fonction summary_departement() offre une vue d’ensemble des élus d’un département. Elle affiche le resume du departement, soit : Le nom du département Le nombre total de communes Le nombre total d’elus Interprétation : Le département étudié est Loire-Atlantique. Il contient 207 communes différentes. Il y 4791 elus dans ce department La fonction summary_departement() est un outil permettant une analyse rapide sur le nombre de communes représentées et la structure démographique des élus.","code":"# Exemple pour le département de la Loire-Atlantique (44) departement_data <- elus_conseillers_municipaux_cm %>%   filter(Code.du.departement == \"44\") %>%   creer_departement()  summary_departement(departement_data) #> Resume du departement : #> Nom du departement : Loire-Atlantique  #> Nombre total de communes : 207  #> Nombre total d'elus : 4791"},{"path":"https://felixsabiron.github.io/firstlibsabiron/articles/generer_un_rapport_d_analyses.html","id":"exécution-de-summary_departement","dir":"Articles","previous_headings":"2. Utilisation de summary_departement","what":"Exécution de summary_departement()","title":"Générer un rapport d’analyses","text":"Interprétation : Le département étudié est Loire-Atlantique. Il contient 207 communes différentes. Il y 4791 elus dans ce department La fonction summary_departement() est un outil permettant une analyse rapide sur le nombre de communes représentées et la structure démographique des élus.","code":"# Exemple pour le département de la Loire-Atlantique (44) departement_data <- elus_conseillers_municipaux_cm %>%   filter(Code.du.departement == \"44\") %>%   creer_departement()  summary_departement(departement_data) #> Resume du departement : #> Nom du departement : Loire-Atlantique  #> Nombre total de communes : 207  #> Nombre total d'elus : 4791"},{"path":"https://felixsabiron.github.io/firstlibsabiron/articles/generer_un_rapport_d_analyses.html","id":"génération-dun-rapport-quarto","dir":"Articles","previous_headings":"","what":"Génération d’un Rapport Quarto","title":"Générer un rapport d’analyses","text":"La fonction generer_rapport() permet de générer un rapport interactif en HTML avec Quarto. Le rapport contiendra : Un résumé des élus de la commune et du département. Des statistiques détaillées sur les élus. Des graphiques pour illustrer les résultats. Le fichier rapport_commune.html sera généré et contiendra toutes les analyses. Pour générer un rapport HTML avec Quarto : Exemple avec la commune 44109 et le departement 44: generer_rapport(commune = “44109”, departement = “44”, output = “rapport_nantes_final.html”)","code":""},{"path":"https://felixsabiron.github.io/firstlibsabiron/articles/generer_un_rapport_d_analyses.html","id":"fonction-generer_rapportcommune-departement-output","dir":"Articles","previous_headings":"","what":"Fonction generer_rapport(commune, departement, output)","title":"Générer un rapport d’analyses","text":"La fonction generer_rapport() permet de générer un rapport interactif en HTML avec Quarto. Le rapport contiendra : Un résumé des élus de la commune et du département. Des statistiques détaillées sur les élus. Des graphiques pour illustrer les résultats. Le fichier rapport_commune.html sera généré et contiendra toutes les analyses.","code":""},{"path":"https://felixsabiron.github.io/firstlibsabiron/articles/generer_un_rapport_d_analyses.html","id":"utilisation-de-generer_rapport","dir":"Articles","previous_headings":"","what":"3. Utilisation de generer_rapport","title":"Générer un rapport d’analyses","text":"Pour générer un rapport HTML avec Quarto : Exemple avec la commune 44109 et le departement 44: generer_rapport(commune = “44109”, departement = “44”, output = “rapport_nantes_final.html”)","code":""},{"path":"https://felixsabiron.github.io/firstlibsabiron/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Felix Sabiron. Author, maintainer.","code":""},{"path":"https://felixsabiron.github.io/firstlibsabiron/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Sabiron F (2025). firstlibsabiron: Analyse des Donnees Communales et Departementales. R package version 0.0.0.9000, https://felixsabiron.github.io/firstlibsabiron/, https://github.com/Felixsabiron/firstlibsabiron.","code":"@Manual{,   title = {firstlibsabiron: Analyse des Donnees Communales et Departementales},   author = {Felix Sabiron},   year = {2025},   note = {R package version 0.0.0.9000, https://felixsabiron.github.io/firstlibsabiron/},   url = {https://github.com/Felixsabiron/firstlibsabiron}, }"},{"path":"https://felixsabiron.github.io/firstlibsabiron/reference/calcul_distribution_age.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculer la distribution des ages des elus — calcul_distribution_age","title":"Calculer la distribution des ages des elus — calcul_distribution_age","text":"Cette fonction calcule la distribution des ages partir d'une colonne Date.de.naissance en format Date.","code":""},{"path":"https://felixsabiron.github.io/firstlibsabiron/reference/calcul_distribution_age.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculer la distribution des ages des elus — calcul_distribution_age","text":"","code":"calcul_distribution_age(data)"},{"path":"https://felixsabiron.github.io/firstlibsabiron/reference/calcul_distribution_age.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculer la distribution des ages des elus — calcul_distribution_age","text":"data Un dataframe contenant au moins la colonne suivante : Date.de.naissance (Date) : La date de naissance des elus, qui doit etre deja convertie en format Date.","code":""},{"path":"https://felixsabiron.github.io/firstlibsabiron/reference/calcul_distribution_age.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculer la distribution des ages des elus — calcul_distribution_age","text":"Un vecteur numerique representant les ages des elus en annees.","code":""},{"path":"https://felixsabiron.github.io/firstlibsabiron/reference/calcul_distribution_age.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculer la distribution des ages des elus — calcul_distribution_age","text":"La fonction verifie la presence de la colonne Date.de.naissance. Elle verifie que la colonne est bien de type Date, sinon elle renvoie une erreur. Elle calcule l'age en annees en utilisant la difference entre la date du jour (Sys.Date()) et la Date.de.naissance.","code":""},{"path":"https://felixsabiron.github.io/firstlibsabiron/reference/calcul_distribution_age.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculer la distribution des ages des elus — calcul_distribution_age","text":"","code":"if (FALSE) { # \\dontrun{ library(dplyr) library(lubridate)  # Exemple de dataframe avec la colonne en format Date data <- data.frame(   Date.de.naissance = as.Date(c(\"1950-05-12\", \"1965-09-23\", \"1948-11-07\")) )  # Calculer la distribution des ages calcul_distribution_age(data) } # }"},{"path":"https://felixsabiron.github.io/firstlibsabiron/reference/compter_nombre_d_elus.html","id":null,"dir":"Reference","previous_headings":"","what":"Compter le nombre d'elus uniques — compter_nombre_d_elus","title":"Compter le nombre d'elus uniques — compter_nombre_d_elus","text":"Cette fonction compte le nombre total d'elus presents dans un dataframe contenant leurs informations.","code":""},{"path":"https://felixsabiron.github.io/firstlibsabiron/reference/compter_nombre_d_elus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compter le nombre d'elus uniques — compter_nombre_d_elus","text":"","code":"compter_nombre_d_elus(data)"},{"path":"https://felixsabiron.github.io/firstlibsabiron/reference/compter_nombre_d_elus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compter le nombre d'elus uniques — compter_nombre_d_elus","text":"data Un dataframe contenant au moins les colonnes Nom.de.l.elu, Prenom.de.l.elu et Date.de.naissance.","code":""},{"path":"https://felixsabiron.github.io/firstlibsabiron/reference/compter_nombre_d_elus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compter le nombre d'elus uniques — compter_nombre_d_elus","text":"Un entier representant le nombre total d'elus dans le dataframe.","code":""},{"path":"https://felixsabiron.github.io/firstlibsabiron/reference/compter_nombre_d_elus.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compter le nombre d'elus uniques — compter_nombre_d_elus","text":"La fonction verifie la presence des colonnes obligatoires dans data. Elle compte le nombre total de lignes du dataframe, supposant que chaque ligne represente un elu unique.","code":""},{"path":"https://felixsabiron.github.io/firstlibsabiron/reference/compter_nombre_d_elus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compter le nombre d'elus uniques — compter_nombre_d_elus","text":"","code":"if (FALSE) { # \\dontrun{ # Exemple de dataframe data <- data.frame(   Nom.de.l.elu = c(\"Durand\", \"Martin\", \"Dupont\", \"Durand\"),   Prenom.de.l.elu = c(\"Jean\", \"Sophie\", \"Paul\", \"Jean\"),   Date.de.naissance = c(\"12/05/1950\", \"23/09/1965\", \"07/11/1948\", \"12/05/1950\") )  # Compter le nombre total d'elus compter_nombre_d_elus(data) } # }"},{"path":"https://felixsabiron.github.io/firstlibsabiron/reference/creer_commune.html","id":null,"dir":"Reference","previous_headings":"","what":"Creer un objet de type ","title":"Creer un objet de type ","text":"La fonction s'assure que le dataframe contient une seule commune distincte, et lui attribue la classe \"commune\" s'il ne l'pas deja.","code":""},{"path":"https://felixsabiron.github.io/firstlibsabiron/reference/creer_commune.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creer un objet de type ","text":"","code":"creer_commune(df)"},{"path":"https://felixsabiron.github.io/firstlibsabiron/reference/creer_commune.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creer un objet de type ","text":"df Un dataframe contenant au moins la colonne suivante : Code.de.la.commune (character ou numeric) : Le code identifiant la commune.","code":""},{"path":"https://felixsabiron.github.io/firstlibsabiron/reference/creer_commune.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creer un objet de type ","text":"Un dataframe de classe \"commune\", pret etre utilise dans d'autres fonctions specifiques aux communes.","code":""},{"path":"https://felixsabiron.github.io/firstlibsabiron/reference/creer_commune.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Creer un objet de type ","text":"Cette fonction transforme un dataframe representant une seule commune en un objet de classe \"commune\". La fonction verifie que la colonne Code.de.la.commune est presente dans df. Elle s'assure qu'il n'y qu'une seule commune distincte, sinon elle genere une erreur. Si la classe \"commune\" n'est pas deja presente, elle est ajoutee l'objet.","code":""},{"path":"https://felixsabiron.github.io/firstlibsabiron/reference/creer_commune.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creer un objet de type ","text":"","code":"if (FALSE) { # \\dontrun{ # Exemple de dataframe valide avec une seule commune data <- data.frame(   Code.de.la.commune = rep(\"75056\", 5),  # Paris   Nom.de.la.commune = rep(\"Paris\", 5),   Population = c(100, 200, 150, 180, 220) )  # Creer l'objet commune commune <- creer_commune(data) class(commune)  # Verifier la classe } # }"},{"path":"https://felixsabiron.github.io/firstlibsabiron/reference/creer_departement.html","id":null,"dir":"Reference","previous_headings":"","what":"Creer un objet de type ","title":"Creer un objet de type ","text":"Cette fonction transforme un dataframe representant un departement en un objet de classe \"departement\".","code":""},{"path":"https://felixsabiron.github.io/firstlibsabiron/reference/creer_departement.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creer un objet de type ","text":"","code":"creer_departement(df)"},{"path":"https://felixsabiron.github.io/firstlibsabiron/reference/creer_departement.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creer un objet de type ","text":"df Un dataframe contenant au moins la colonne Code.du.departement.","code":""},{"path":"https://felixsabiron.github.io/firstlibsabiron/reference/creer_departement.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creer un objet de type ","text":"Un dataframe de classe \"departement\", qui peut etre utilise avec des fonctions specifiques aux departements.","code":""},{"path":"https://felixsabiron.github.io/firstlibsabiron/reference/creer_departement.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Creer un objet de type ","text":"La fonction verifie que la colonne Code.du.departement est presente dans df. Elle s'assure que le dataframe represente un seul departement, sinon elle genere une erreur. La classe \"departement\" est ajoutee l'objet pour permettre un traitement specifique.","code":""},{"path":"https://felixsabiron.github.io/firstlibsabiron/reference/creer_departement.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creer un objet de type ","text":"","code":"if (FALSE) { # \\dontrun{ data <- data.frame(   Code.du.departement = rep(\"75\", 10),   Nom.du.departement = rep(\"Paris\", 10),   Population = c(100, 200, 150, 180, 220, 250, 300, 270, 260, 280) ) departement <- creer_departement(data) class(departement)  # Verifier la classe } # }"},{"path":"https://felixsabiron.github.io/firstlibsabiron/reference/elus_conseillers_municipaux_cm.html","id":null,"dir":"Reference","previous_headings":"","what":"Donnees des elus municipaux — elus_conseillers_municipaux_cm","title":"Donnees des elus municipaux — elus_conseillers_municipaux_cm","text":"Ce jeu de donnees contient les informations sur les conseillers municipaux.","code":""},{"path":"https://felixsabiron.github.io/firstlibsabiron/reference/elus_conseillers_municipaux_cm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Donnees des elus municipaux — elus_conseillers_municipaux_cm","text":"","code":"elus_conseillers_municipaux_cm"},{"path":"https://felixsabiron.github.io/firstlibsabiron/reference/elus_conseillers_municipaux_cm.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Donnees des elus municipaux — elus_conseillers_municipaux_cm","text":"Un data frame avec 9753 lignes et 16 colonnes : Code du departement Code numerique du departement Libelle du departement Nom du departement Code de la collectivite Code unique de la collectivite ... Autres colonnes","code":""},{"path":"https://felixsabiron.github.io/firstlibsabiron/reference/elus_conseillers_municipaux_cm.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Donnees des elus municipaux — elus_conseillers_municipaux_cm","text":"https://exemple.com/donnees","code":""},{"path":"https://felixsabiron.github.io/firstlibsabiron/reference/generer_rapport.html","id":null,"dir":"Reference","previous_headings":"","what":"Generer un rapport personnalise — generer_rapport","title":"Generer un rapport personnalise — generer_rapport","text":"Cette fonction genere un rapport Quarto au format PDF ou HTML incluant : Une visualisation des elus par code professionnel pour la commune et le departement. Un resume des informations pour la commune et le departement.","code":""},{"path":"https://felixsabiron.github.io/firstlibsabiron/reference/generer_rapport.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generer un rapport personnalise — generer_rapport","text":"","code":"generer_rapport(commune, departement, output)"},{"path":"https://felixsabiron.github.io/firstlibsabiron/reference/generer_rapport.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generer un rapport personnalise — generer_rapport","text":"commune La commune pour laquelle generer le rapport (code INSEE). departement Le departement concerne (code numerique). output Le nom du fichier de sortie (ex: \"rapport.pdf\" ou \"rapport.html\").","code":""},{"path":"https://felixsabiron.github.io/firstlibsabiron/reference/generer_rapport.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generer un rapport personnalise — generer_rapport","text":"Le chemin du fichier genere.","code":""},{"path":"https://felixsabiron.github.io/firstlibsabiron/reference/plot_code_professions.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualiser la repartition des elus par code professionnel — plot_code_professions","title":"Visualiser la repartition des elus par code professionnel — plot_code_professions","text":"La fonction compte le nombre d'elus pour chaque code professionnel (Code.de.la.categorie.socio.professionnelle), filtre les codes n'ayant aucun elu, puis produit un graphique en barres classe par ordre decroissant.","code":""},{"path":"https://felixsabiron.github.io/firstlibsabiron/reference/plot_code_professions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualiser la repartition des elus par code professionnel — plot_code_professions","text":"","code":"plot_code_professions(data)"},{"path":"https://felixsabiron.github.io/firstlibsabiron/reference/plot_code_professions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualiser la repartition des elus par code professionnel — plot_code_professions","text":"data Un dataframe contenant au moins la colonne suivante : Code.de.la.categorie.socio.professionnelle (character) : Code professionnel des elus.","code":""},{"path":"https://felixsabiron.github.io/firstlibsabiron/reference/plot_code_professions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualiser la repartition des elus par code professionnel — plot_code_professions","text":"Un graphique ggplot2 representant la repartition des elus par code professionnel.","code":""},{"path":"https://felixsabiron.github.io/firstlibsabiron/reference/plot_code_professions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Visualiser la repartition des elus par code professionnel — plot_code_professions","text":"Cette fonction genere un graphique en barres horizontales representant le nombre d'elus par code professionnel. Les valeurs n = 0 sont filtrees avant l'affichage du graphique. Le graphique est trie par nombre d'elus de maniere decroissante. Les barres sont colorees en bleu fonce pour une meilleure lisibilite.","code":""},{"path":"https://felixsabiron.github.io/firstlibsabiron/reference/plot_code_professions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualiser la repartition des elus par code professionnel — plot_code_professions","text":"","code":"if (FALSE) { # \\dontrun{ library(ggplot2) library(dplyr)  # Exemple de dataframe data <- data.frame(   Code.de.la.categorie.socio.professionnelle = c(\"A1\", \"B2\", \"A1\", \"C3\", \"B2\", \"A1\") )  # Generer le graphique plot_code_professions(data) } # }"},{"path":"https://felixsabiron.github.io/firstlibsabiron/reference/plot_commune.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualiser la repartition des elus par code professionnel dans une commune — plot_commune","title":"Visualiser la repartition des elus par code professionnel dans une commune — plot_commune","text":"La fonction verifie que l'objet fourni est bien de classe \"commune\", valide sa structure avec validate_schema(), puis produit un graphique en barres horizontales representant la repartition des elus par code professionnel. Le titre du graphique est compose du nom de la commune et de son departement.","code":""},{"path":"https://felixsabiron.github.io/firstlibsabiron/reference/plot_commune.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualiser la repartition des elus par code professionnel dans une commune — plot_commune","text":"","code":"plot_commune(x, ...)"},{"path":"https://felixsabiron.github.io/firstlibsabiron/reference/plot_commune.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualiser la repartition des elus par code professionnel dans une commune — plot_commune","text":"x Un objet de classe \"commune\". ... Arguments supplementaires passes ggplot2::ggplot().","code":""},{"path":"https://felixsabiron.github.io/firstlibsabiron/reference/plot_commune.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualiser la repartition des elus par code professionnel dans une commune — plot_commune","text":"Un graphique ggplot2 representant la repartition des elus par code professionnel dans la commune.","code":""},{"path":"https://felixsabiron.github.io/firstlibsabiron/reference/plot_commune.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Visualiser la repartition des elus par code professionnel dans une commune — plot_commune","text":"Cette fonction genere un graphique en barres representant le nombre d'elus par code professionnel pour une commune donnee. La fonction utilise validate_schema(x) pour s'assurer que la structure des donnees est correcte. Elle verifie que x est bien un objet de classe \"commune\", sinon elle renvoie une erreur. Elle compte le nombre d'elus par code professionnel et filtre ceux ayant n = 0. Un graphique en barres est genere, trie en ordre decroissant et affichant les valeurs sur les barres.","code":""},{"path":"https://felixsabiron.github.io/firstlibsabiron/reference/plot_commune.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualiser la repartition des elus par code professionnel dans une commune — plot_commune","text":"","code":"if (FALSE) { # \\dontrun{ library(ggplot2) library(dplyr)  # Exemple de dataframe representant une commune data <- data.frame(   Libelle.de.la.commune = rep(\"Paris\", 6),   Libelle.du.departement = rep(\"Paris\", 6),   Code.de.la.categorie.socio.professionnelle = c(\"A1\", \"B2\", \"A1\", \"C3\", \"B2\", \"A1\") )  # Ajouter la classe \"commune\" class(data) <- c(\"commune\", class(data))  # Generer le graphique plot_commune(data) } # }"},{"path":"https://felixsabiron.github.io/firstlibsabiron/reference/plot_departement.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualiser la repartition des elus par code professionnel dans un departement — plot_departement","title":"Visualiser la repartition des elus par code professionnel dans un departement — plot_departement","text":"La fonction verifie que l'objet fourni est bien de classe \"departement\", valide sa structure avec validate_schema(), puis produit un graphique en barres horizontales representant la repartition des elus par code professionnel. Le graphique affiche les 10 codes professionnels les plus representes dans le departement. Le titre du graphique inclut le nom du departement et le nombre total de communes qu'il contient.","code":""},{"path":"https://felixsabiron.github.io/firstlibsabiron/reference/plot_departement.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualiser la repartition des elus par code professionnel dans un departement — plot_departement","text":"","code":"plot_departement(x, ...)"},{"path":"https://felixsabiron.github.io/firstlibsabiron/reference/plot_departement.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualiser la repartition des elus par code professionnel dans un departement — plot_departement","text":"x Un objet de classe \"departement\". ... Arguments supplementaires passes ggplot2::ggplot().","code":""},{"path":"https://felixsabiron.github.io/firstlibsabiron/reference/plot_departement.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualiser la repartition des elus par code professionnel dans un departement — plot_departement","text":"Un graphique ggplot2 representant la repartition des elus par code professionnel dans le departement.","code":""},{"path":"https://felixsabiron.github.io/firstlibsabiron/reference/plot_departement.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Visualiser la repartition des elus par code professionnel dans un departement — plot_departement","text":"Cette fonction genere un graphique en barres representant le nombre d'elus par code professionnel pour un departement donne. La fonction utilise validate_schema(x) pour s'assurer que la structure des donnees est correcte. Elle verifie que x est bien un objet de classe \"departement\", sinon elle renvoie une erreur. Elle compte le nombre total de communes distinctes presentes dans le departement. Elle filtre et selectionne les 10 codes professionnels les plus representes. Un graphique en barres est genere, trie en ordre decroissant et affichant les valeurs sur les barres.","code":""},{"path":"https://felixsabiron.github.io/firstlibsabiron/reference/plot_departement.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualiser la repartition des elus par code professionnel dans un departement — plot_departement","text":"","code":"if (FALSE) { # \\dontrun{ library(ggplot2) library(dplyr)  # Exemple de dataframe representant un departement data <- data.frame(   Libelle.du.departement = rep(\"Paris\", 15),   Libelle.de.la.commune = c(rep(\"Paris\", 10), rep(\"Boulogne-Billancourt\", 5)),   Code.de.la.categorie.socio.professionnelle = sample(LETTERS[1:5], 15, replace = TRUE) )  # Ajouter la classe \"departement\" class(data) <- c(\"departement\", class(data))  # Generer le graphique plot_departement(data) } # }"},{"path":"https://felixsabiron.github.io/firstlibsabiron/reference/print.summary.commune.html","id":null,"dir":"Reference","previous_headings":"","what":"Affichage du resume pour summary.commune — print.summary.commune","title":"Affichage du resume pour summary.commune — print.summary.commune","text":"Cette fonction definit l'affichage personnalise pour les objets de classe summary.commune.","code":""},{"path":"https://felixsabiron.github.io/firstlibsabiron/reference/print.summary.commune.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Affichage du resume pour summary.commune — print.summary.commune","text":"","code":"# S3 method for class 'summary.commune' print(x, ...)"},{"path":"https://felixsabiron.github.io/firstlibsabiron/reference/print.summary.commune.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Affichage du resume pour summary.commune — print.summary.commune","text":"x Un objet de classe summary.commune. ... Arguments supplementaires (non utilises).","code":""},{"path":"https://felixsabiron.github.io/firstlibsabiron/reference/print.summary.commune.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Affichage du resume pour summary.commune — print.summary.commune","text":"NULL (resume affiche dans la console)","code":""},{"path":"https://felixsabiron.github.io/firstlibsabiron/reference/print.summary.departement.html","id":null,"dir":"Reference","previous_headings":"","what":"Affichage du resume pour summary.departement — print.summary.departement","title":"Affichage du resume pour summary.departement — print.summary.departement","text":"Cette fonction definit l'affichage personnalise pour les objets de classe summary.departement.","code":""},{"path":"https://felixsabiron.github.io/firstlibsabiron/reference/print.summary.departement.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Affichage du resume pour summary.departement — print.summary.departement","text":"","code":"# S3 method for class 'summary.departement' print(x, ...)"},{"path":"https://felixsabiron.github.io/firstlibsabiron/reference/print.summary.departement.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Affichage du resume pour summary.departement — print.summary.departement","text":"x Un objet de classe summary.departement. ... Arguments supplementaires (non utilises).","code":""},{"path":"https://felixsabiron.github.io/firstlibsabiron/reference/print.summary.departement.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Affichage du resume pour summary.departement — print.summary.departement","text":"NULL (resume affiche dans la console)","code":""},{"path":"https://felixsabiron.github.io/firstlibsabiron/reference/summary.commune.html","id":null,"dir":"Reference","previous_headings":"","what":"Methode S3 pour summary.commune — summary.commune","title":"Methode S3 pour summary.commune — summary.commune","text":"Cette fonction redirige automatiquement summary() vers summary_commune() pour les objets de classe commune.","code":""},{"path":"https://felixsabiron.github.io/firstlibsabiron/reference/summary.commune.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Methode S3 pour summary.commune — summary.commune","text":"","code":"# S3 method for class 'commune' summary(object, ...)"},{"path":"https://felixsabiron.github.io/firstlibsabiron/reference/summary.commune.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Methode S3 pour summary.commune — summary.commune","text":"object Un objet de classe commune. ... Arguments supplementaires (non utilises).","code":""},{"path":"https://felixsabiron.github.io/firstlibsabiron/reference/summary.departement.html","id":null,"dir":"Reference","previous_headings":"","what":"Methode S3 pour summary.departement — summary.departement","title":"Methode S3 pour summary.departement — summary.departement","text":"Cette fonction redirige automatiquement summary() vers summary_departement() pour les objets de classe departement.","code":""},{"path":"https://felixsabiron.github.io/firstlibsabiron/reference/summary.departement.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Methode S3 pour summary.departement — summary.departement","text":"","code":"# S3 method for class 'departement' summary(object, ...)"},{"path":"https://felixsabiron.github.io/firstlibsabiron/reference/summary.departement.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Methode S3 pour summary.departement — summary.departement","text":"object Un objet de classe departement. ... Arguments supplementaires (non utilises).","code":""},{"path":"https://felixsabiron.github.io/firstlibsabiron/reference/summary_commune.html","id":null,"dir":"Reference","previous_headings":"","what":"Resume pour les objets de classe ","title":"Resume pour les objets de classe ","text":"Cette fonction genere un resume pour les objets de classe commune. Elle affiche le nom de la commune, le nombre total d'elus et la repartition professionnelle.","code":""},{"path":"https://felixsabiron.github.io/firstlibsabiron/reference/summary_commune.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resume pour les objets de classe ","text":"","code":"summary_commune(obj, ...)"},{"path":"https://felixsabiron.github.io/firstlibsabiron/reference/summary_commune.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Resume pour les objets de classe ","text":"obj Un objet de classe commune. ... Arguments supplementaires (non utilises).","code":""},{"path":"https://felixsabiron.github.io/firstlibsabiron/reference/summary_commune.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Resume pour les objets de classe ","text":"Un resume des informations de la commune sous forme de liste.","code":""},{"path":"https://felixsabiron.github.io/firstlibsabiron/reference/summary_departement.html","id":null,"dir":"Reference","previous_headings":"","what":"Resume pour les objets de classe ","title":"Resume pour les objets de classe ","text":"Cette fonction genere un resume pour les objets de classe departement. Elle affiche le nom du departement, le nombre total de communes, et le nombre total d'elus.","code":""},{"path":"https://felixsabiron.github.io/firstlibsabiron/reference/summary_departement.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resume pour les objets de classe ","text":"","code":"summary_departement(object, ...)"},{"path":"https://felixsabiron.github.io/firstlibsabiron/reference/summary_departement.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Resume pour les objets de classe ","text":"object Un objet de classe departement. ... Arguments supplementaires (non utilises).","code":""},{"path":"https://felixsabiron.github.io/firstlibsabiron/reference/summary_departement.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Resume pour les objets de classe ","text":"Un resume des informations du departement sous forme de liste.","code":""},{"path":"https://felixsabiron.github.io/firstlibsabiron/reference/trouver_l_elus_le_plus_age.html","id":null,"dir":"Reference","previous_headings":"","what":"Trouver l'elu(e) le plus age(e) — trouver_l_elus_le_plus_age","title":"Trouver l'elu(e) le plus age(e) — trouver_l_elus_le_plus_age","text":"Cette fonction identifie l'elu(e) le plus age(e) dans un dataframe contenant des informations sur les elus.","code":""},{"path":"https://felixsabiron.github.io/firstlibsabiron/reference/trouver_l_elus_le_plus_age.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trouver l'elu(e) le plus age(e) — trouver_l_elus_le_plus_age","text":"","code":"trouver_l_elus_le_plus_age(data)"},{"path":"https://felixsabiron.github.io/firstlibsabiron/reference/trouver_l_elus_le_plus_age.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trouver l'elu(e) le plus age(e) — trouver_l_elus_le_plus_age","text":"data Un dataframe contenant au moins les colonnes suivantes : Nom.de.l.elu (character) : Le nom de l'elu(e). Prenom.de.l.elu (character) : Le prenom de l'elu(e). Date.de.naissance (character) : La date de naissance sous format jour/mois/annee (ex: \"12/05/1950\").","code":""},{"path":"https://felixsabiron.github.io/firstlibsabiron/reference/trouver_l_elus_le_plus_age.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trouver l'elu(e) le plus age(e) — trouver_l_elus_le_plus_age","text":"Un dataframe avec les informations de l'elu(e) le plus age(e), contenant les colonnes : Nom.de.l.elu Prenom.de.l.elu Date.de.naissance (au format Date).","code":""},{"path":"https://felixsabiron.github.io/firstlibsabiron/reference/trouver_l_elus_le_plus_age.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Trouver l'elu(e) le plus age(e) — trouver_l_elus_le_plus_age","text":"La fonction verifie la presence des colonnes requises. Elle convertit la colonne Date.de.naissance en format Date avec lubridate::dmy(). Elle selectionne l'elu(e) avec la date de naissance la plus ancienne.","code":""},{"path":"https://felixsabiron.github.io/firstlibsabiron/reference/trouver_l_elus_le_plus_age.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Trouver l'elu(e) le plus age(e) — trouver_l_elus_le_plus_age","text":"","code":"if (FALSE) { # \\dontrun{ library(dplyr) library(lubridate)  # Exemple de dataframe data <- data.frame(   Nom.de.l.elu = c(\"Durand\", \"Martin\", \"Dupont\"),   Prenom.de.l.elu = c(\"Jean\", \"Sophie\", \"Paul\"),   Date.de.naissance = c(\"12/05/1950\", \"23/09/1965\", \"07/11/1948\") )  # Trouver l'elu le plus age trouver_l_elus_le_plus_age(data) } # }"},{"path":"https://felixsabiron.github.io/firstlibsabiron/reference/validate_schema.html","id":null,"dir":"Reference","previous_headings":"","what":"Validation du schema du dataframe — validate_schema","title":"Validation du schema du dataframe — validate_schema","text":"Cette fonction verifie que le dataframe contient les colonnes necessaires pour etre considere comme un objet de type \"commune\" ou \"departement\".","code":""},{"path":"https://felixsabiron.github.io/firstlibsabiron/reference/validate_schema.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validation du schema du dataframe — validate_schema","text":"","code":"validate_schema(df)"},{"path":"https://felixsabiron.github.io/firstlibsabiron/reference/validate_schema.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validation du schema du dataframe — validate_schema","text":"df Un dataframe valider.","code":""},{"path":"https://felixsabiron.github.io/firstlibsabiron/reference/validate_schema.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validation du schema du dataframe — validate_schema","text":"Aucun retour si la validation est reussie. Stoppe avec une erreur sinon.","code":""},{"path":"https://felixsabiron.github.io/firstlibsabiron/reference/validate_schema.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Validation du schema du dataframe — validate_schema","text":"La fonction verifie la presence des colonnes essentielles : Pour un objet \"commune\" : Code.de.la.commune, Libelle.de.la.commune Pour un objet \"departement\" : Code.du.departement, Libelle.du.departement","code":""},{"path":"https://felixsabiron.github.io/firstlibsabiron/reference/validate_schema.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validation du schema du dataframe — validate_schema","text":"","code":"if (FALSE) { # \\dontrun{ data <- data.frame(   Code.de.la.commune = \"75056\",   Libelle.de.la.commune = \"Paris\" ) validate_schema(data) } # }"}]
